package com.github.kisaragieffective.kisaragistd.collection

import com.github.kisaragieffective.kisaragistd.annotations.AutoGenerated
import com.github.kisaragieffective.kisaragistd.annotations.UsedStarSpreader
import java.util.EnumMap
import java.util.EnumSet

fun <V> emptyEnumMap() = EnumMap<Nothing, V>(Nothing::class.java)

@AutoGenerated("ClasslessCollectionFactory_enumSetOf")
fun <E : Enum<E>> enumSetOf(e1: E): EnumSet<E> {
    return EnumSet.of(e1)
}

@AutoGenerated("ClasslessCollectionFactory_enumSetOf")
fun <E : Enum<E>> enumSetOf(e1: E, e2: E): EnumSet<E> {
    return EnumSet.of(e1, e2)
}

@AutoGenerated("ClasslessCollectionFactory_enumSetOf")
fun <E : Enum<E>> enumSetOf(e1: E, e2: E, e3: E): EnumSet<E> {
    return EnumSet.of(e1, e2, e3)
}

@AutoGenerated("ClasslessCollectionFactory_enumSetOf")
fun <E : Enum<E>> enumSetOf(e1: E, e2: E, e3: E, e4: E): EnumSet<E> {
    return EnumSet.of(e1, e2, e3, e4)
}

@AutoGenerated("ClasslessCollectionFactory_enumSetOf")
fun <E : Enum<E>> enumSetOf(e1: E, e2: E, e3: E, e4: E, e5: E): EnumSet<E> {
    return EnumSet.of(e1, e2, e3, e4, e5)
}

fun <F : Enum<F>> enumSetOf(e: F, vararg rest: F): EnumSet<F> {
    @UsedStarSpreader
    return EnumSet.of(e, *rest)
}

inline fun <reified K : Enum<K>, V> enumMapOf(): EnumMap<K, V> {
    return EnumMap(K::class.java)
}
